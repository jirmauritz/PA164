files <- list.files()
files
files <- list.files(.)
files <- list.files(path = ".")
filrs
files
files <- list.files(path = "..")
install.packages("RWeka", dependencies=TRUE)
install.packages("rJava", dependencies=TRUE)
install.packages("rJava", dependencies=TRUE)
install.packages("RWeka", dependencies=TRUE)
library(RWeka)
source('~/Skola/PA164 Strojové učení/HW2/script.R', echo=TRUE)
setwd("~/Skola/PA164 Strojové učení/HW2")
source('~/Skola/PA164 Strojové učení/HW2/script.R', echo=TRUE)
View(result)
algorithms <- c("lda")
# EVALUATE
for (algorithm in algorithms) {
print(paste("Starting algorithm: ", algorithm))
alg.results <- c()
for (x in 1:length(data.tables)) {
print(paste("For data: ", settings[x]))
if (is.null(data.tables[[x]])) {
alg.results <- c(alg.results, NA)
} else {
data <- data.frame(data.tables[x])
accuracy <- evaluate_model(data, algorithm)
alg.results <- c(alg.results, accuracy)
}
}
result[algorithm] <- alg.results
}
dt.UniBiGram.Data$DOC.CLASS <- as.factor(c(rep("sci.med",1000), rep("soc.religion.christian", 997)))
# EVALUATE
for (algorithm in algorithms) {
print(paste("Starting algorithm: ", algorithm))
alg.results <- c()
for (x in 1:length(data.tables)) {
print(paste("For data: ", settings[x]))
if (is.null(data.tables[[x]])) {
alg.results <- c(alg.results, NA)
} else {
data <- data.frame(data.tables[x])
accuracy <- evaluate_model(data, algorithm)
alg.results <- c(alg.results, accuracy)
}
}
result[algorithm] <- alg.results
}
View(dt.UniBiGram.Data)
setwd("~/Skola/PA164 Strojové učení/HW2")
source('~/Skola/PA164 Strojové učení/HW2/script.R', echo=TRUE)
View(result)
algorithms <- c("lda")
# EVALUATE
for (algorithm in algorithms) {
print(paste("Starting algorithm: ", algorithm))
alg.results <- c()
for (x in 1:length(data.tables)) {
print(paste("For data: ", settings[x]))
if (is.null(data.tables[[x]])) {
alg.results <- c(alg.results, NA)
} else {
data <- data.frame(data.tables[x])
accuracy <- evaluate_model(data, algorithm)
alg.results <- c(alg.results, accuracy)
}
}
result[algorithm] <- alg.results
}
tfidf.Bigram.Matrix <- removeSparseTerms(tfidf.Bigram.Matrix, 0.9)
tfidf.Bigram.Data <- data.frame(inspect(tfidf.Bigram.Matrix))
tfidf.Bigram.Data$DOC.CLASS <- as.factor(c(rep("sci.med",1000), rep("soc.religion.christian", 997)))
# tf-idf unigrams+bigrams
tfidf.UniBiGram.Data <- cbind(tfidf.Unigram.Data, tfidf.Bigram.Data)
# EVALUATE
for (algorithm in algorithms) {
print(paste("Starting algorithm: ", algorithm))
alg.results <- c()
for (x in 1:length(data.tables)) {
print(paste("For data: ", settings[x]))
if (is.null(data.tables[[x]])) {
alg.results <- c(alg.results, NA)
} else {
data <- data.frame(data.tables[x])
accuracy <- evaluate_model(data, algorithm)
alg.results <- c(alg.results, accuracy)
}
}
result[algorithm] <- alg.results
}
evaluate_model <- function(dataset, algorithm) {
fit <- train(DOC.CLASS ~ .,
data = dataset,
method = algorithm,
trControl = trainControl(method = "cv"),
preProc = c("center", "scale"),
metric = "ROC",
tuneGrid = data.frame(gamma = (0:4)/4, lambda = 3/4),
tuneLength = 1)
fit$results$Accuracy[1]
}
# EVALUATE
for (algorithm in algorithms) {
print(paste("Starting algorithm: ", algorithm))
alg.results <- c()
for (x in 1:length(data.tables)) {
print(paste("For data: ", settings[x]))
if (is.null(data.tables[[x]])) {
alg.results <- c(alg.results, NA)
} else {
data <- data.frame(data.tables[x])
accuracy <- evaluate_model(data, algorithm)
alg.results <- c(alg.results, accuracy)
}
}
result[algorithm] <- alg.results
}
# evaluate model for dataset and algorithm
evaluate_model <- function(dataset, algorithm) {
fit <- train(DOC.CLASS ~ .,
data = dataset,
method = algorithm,
trControl = trainControl(method = "cv"),
preProc = c("center", "scale"),
metric = "ROC",
tuneLength = 1)
fit$results$Accuracy[1]
}
# EVALUATE
for (algorithm in algorithms) {
print(paste("Starting algorithm: ", algorithm))
alg.results <- c()
for (x in 1:length(data.tables)) {
print(paste("For data: ", settings[x]))
if (is.null(data.tables[[x]])) {
alg.results <- c(alg.results, NA)
} else {
data <- data.frame(data.tables[x])
accuracy <- evaluate_model(data, algorithm)
alg.results <- c(alg.results, accuracy)
}
}
result[algorithm] <- alg.results
}
source('~/Skola/PA164 Strojové učení/projekt/script.R', echo=TRUE)
source('~/Skola/PA164 Strojové učení/projekt/script.R', echo=TRUE)
source('~/Skola/PA164 Strojové učení/projekt/script.R', echo=TRUE)
setwd("~/Skola/PA164 Strojové učení/projekt")
source('~/Skola/PA164 Strojové učení/projekt/script.R', echo=TRUE)
documents.broadsheet
documents.broadsheet[1]
documents.tabloid[0]
source('~/Skola/PA164 Strojové učení/projekt/script.R', echo=TRUE)
source('~/Skola/PA164 Strojové učení/projekt/script.R', echo=TRUE)
inspect(corpus.tabloid)
corpus.broadsheet[[1]]
corpus.broadsheet[1]
corpus.broadsheet[[10]]
#packages
library(tm)
library(rJava)
library(RWeka)
library(caret)
# FUNCTIONS
# evaluate model for dataset and algorithm
evaluate_model <- function(dataset, algorithm) {
fit <- train(DOC.CLASS ~ .,
data = dataset,
method = algorithm,
trControl = trainControl(method = "cv"),
tuneLength = 1)
fit$results$Accuracy[1]
}
# PREPARE
# loading tabloids
tPath="datasets/tabloids/"
files.tabloid <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
for (x in 1:length(files.tabloid)) {
files.tabloid[x] <- paste(tPath, files.tabloid[x], sep='')
}
# loading broadsheets
tPath="datasets/broadsheets/"
files.broadsheet <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
for (x in 1:length(files.broadsheet)) {
files.broadsheet[x] <- paste(tPath, files.broadsheet[x], sep='')
}
# create vector of tabloids
documents.tabloid <- vector("character", length(files.tabloid))
for (x in 1:length(files.tabloid)) {
file <- readLines(files.tabloid[x], encoding="UTF-8")
documents.tabloid[x] <- file
}
#packages
library(tm)
library(rJava)
library(RWeka)
library(caret)
# FUNCTIONS
# evaluate model for dataset and algorithm
evaluate_model <- function(dataset, algorithm) {
fit <- train(DOC.CLASS ~ .,
data = dataset,
method = algorithm,
trControl = trainControl(method = "cv"),
tuneLength = 1)
fit$results$Accuracy[1]
}
# PREPARE
# loading tabloids
tPath="datasets/tabloids/"
files.tabloid <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
for (x in 1:length(files.tabloid)) {
files.tabloid[x] <- paste(tPath, files.tabloid[x], sep='')
}
# loading broadsheets
tPath="datasets/broadsheets/"
files.broadsheet <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
for (x in 1:length(files.broadsheet)) {
files.broadsheet[x] <- paste(tPath, files.broadsheet[x], sep='')
}
# create vector of tabloids
documents.tabloid <- vector("character", length(files.tabloid))
for (x in 1:length(files.tabloid)) {
file <- readLines(files.tabloid[x], encoding="UTF-8")
documents.tabloid[x] <- file
}
# create vector of broadsheets
documents.broadsheet <- vector("character", length(files.broadsheet))
for (x in 1:length(files.broadsheet)) {
file <- readLines(files.broadsheet[x], encoding="UTF-8")
documents.broadsheet[x] <- file
}
# only utf8 characters
documents.tabloid <- iconv(enc2utf8(documents.tabloid), sub = "byte")
documents.broadsheet <- iconv(enc2utf8(documents.broadsheet), sub = "byte")
#packages
library(tm)
library(rJava)
library(RWeka)
library(caret)
# FUNCTIONS
# evaluate model for dataset and algorithm
evaluate_model <- function(dataset, algorithm) {
fit <- train(DOC.CLASS ~ .,
data = dataset,
method = algorithm,
trControl = trainControl(method = "cv"),
tuneLength = 1)
fit$results$Accuracy[1]
}
# PREPARE
# loading tabloids
tPath="datasets/tabloids/"
files.tabloid <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
for (x in 1:length(files.tabloid)) {
files.tabloid[x] <- paste(tPath, files.tabloid[x], sep='')
}
# loading broadsheets
bPath="datasets/broadsheets/"
files.broadsheet <- list.files(recursive=TRUE, path=bPath)
# add path to filenames
for (x in 1:length(files.broadsheet)) {
files.broadsheet[x] <- paste(bPath, files.broadsheet[x], sep='')
}
# create vector of tabloids
documents.tabloid <- vector("character", length(files.tabloid))
for (x in 1:length(files.tabloid)) {
file <- readLines(files.tabloid[x], encoding="UTF-8")
documents.tabloid[x] <- file
}
# create vector of broadsheets
documents.broadsheet <- vector("character", length(files.broadsheet))
for (x in 1:length(files.broadsheet)) {
file <- readLines(files.broadsheet[x], encoding="UTF-8")
documents.broadsheet[x] <- file
}
# PREPARE
# loading tabloids
tPath="datasets/tabloids/"
files.tabloid <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
setwd("~/Skola/PA164 Strojové učení/projekt/projekt")
# PREPARE
# loading tabloids
tPath="datasets/tabloids/"
files.tabloid <- list.files(recursive=TRUE, path=tPath)
source('~/Skola/PA164 Strojové učení/projekt/projekt/script.R', echo=TRUE)
documents.tabloid[5]
documents.tabloid[6]
# loading tabloids
tPath="datasets/tabloids/"
files.tabloid <- list.files(recursive=TRUE, path=tPath)
# add path to filenames
for (x in 1:length(files.tabloid)) {
files.tabloid[x] <- paste(tPath, files.tabloid[x], sep='')
}
# loading broadsheets
bPath="datasets/broadsheets/"
files.broadsheet <- list.files(recursive=TRUE, path=bPath)
# add path to filenames
for (x in 1:length(files.broadsheet)) {
files.broadsheet[x] <- paste(bPath, files.broadsheet[x], sep='')
}
# create vector of tabloids
documents.tabloid <- vector("character", length(files.tabloid))
for (x in 1:length(files.tabloid)) {
file <- readLines(files.tabloid[x], encoding="UTF-8")
file
documents.tabloid[x] <- file
}
